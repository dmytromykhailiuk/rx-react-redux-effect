{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../src/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { Observable, OperatorFunction, Subscription } from 'rxjs';\nexport interface Action<T extends string = string> {\n  [key: string]: any;\n  type: T;\n}\n\nexport interface SideEffect {\n  effect: Observable<Action | any>;\n  dispatch: boolean;\n}\n\nexport interface ObservableStore<T> {\n  pipe: <R>(...operations: OperatorFunction<T, R>[]) => Observable<R>;\n  subscribe: (fn?: (data: T) => void) => Subscription;\n  dispatch: (action: Action) => void;\n  getState: () => T;\n}\n\nexport type Store<T, A extends Action> = {\n  getState: () => T;\n  dispatch: (action: A) => void;\n  subscribe: (listener: () => void) => () => void;\n};\n"]}