{"version":3,"file":"of-type.js","sourceRoot":"","sources":["../../src/of-type.ts"],"names":[],"mappings":";;;AAAA,+BAA0C;AAGnC,MAAM,MAAM,GACjB,CAAiE,aAAwB,EAAE,EAAE,CAC7F,CAAC,OAAsB,EAA+B,EAAE,CACtD,OAAO,CAAC,IAAI,CACV,IAAA,aAAM,EAAC,CAAC,MAAc,EAA6B,EAAE;IACnD,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;QACrC,OAAO,MAAM,CAAC,IAAI,KAAK,aAAa,CAAC;KACtC;IACD,IAAI,CAAC,aAAmB,aAAnB,aAAa,uBAAb,aAAa,CAAQ,IAAI,KAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;QACnE,OAAO,MAAM,CAAC,IAAI,KAAM,aAAmB,CAAC,IAAI,CAAC;KAClD;IACD,IAAI,OAAO,aAAa,KAAK,UAAU,EAAE;QACvC,OAAO,MAAM,CAAC,IAAI,KAAK,aAAa,CAAC,EAAS,CAAC,CAAC,IAAI,CAAC;KACtD;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC,CACH,CAAC;AAhBO,QAAA,MAAM,UAgBb","sourcesContent":["import { filter, Observable } from 'rxjs';\nimport { Action } from './interfaces';\n\nexport const ofType =\n  <F extends Action, T extends F['type'], E extends (_: any) => F>(typeToCompare: T | F | E) =>\n  (source$: Observable<F>): Observable<F & { type: T }> =>\n    source$.pipe(\n      filter((action: Action): action is F & { type: T } => {\n        if (typeof typeToCompare === 'string') {\n          return action.type === typeToCompare;\n        }\n        if ((typeToCompare as F)?.type || typeof typeToCompare === 'object') {\n          return action.type === (typeToCompare as F).type;\n        }\n        if (typeof typeToCompare === 'function') {\n          return action.type === typeToCompare({} as any).type;\n        }\n        return false;\n      }),\n    );\n"]}